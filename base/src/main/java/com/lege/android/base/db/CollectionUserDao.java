package com.lege.android.base.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "COLLECTION_USER".
*/
public class CollectionUserDao extends AbstractDao<CollectionUser, Long> {

    public static final String TABLENAME = "COLLECTION_USER";

    /**
     * Properties of entity CollectionUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Position = new Property(4, String.class, "position", false, "POSITION");
        public final static Property Dept = new Property(5, String.class, "dept", false, "DEPT");
        public final static Property Collection = new Property(6, String.class, "collection", false, "COLLECTION");
        public final static Property Huanxin = new Property(7, String.class, "huanxin", false, "HUANXIN");
    };


    public CollectionUserDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UID\" TEXT," + // 1: uid
                "\"NAME\" TEXT," + // 2: name
                "\"DATE\" TEXT," + // 3: date
                "\"POSITION\" TEXT," + // 4: position
                "\"DEPT\" TEXT," + // 5: dept
                "\"COLLECTION\" TEXT," + // 6: collection
                "\"HUANXIN\" TEXT);"); // 7: huanxin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectionUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(5, position);
        }
 
        String dept = entity.getDept();
        if (dept != null) {
            stmt.bindString(6, dept);
        }
 
        String collection = entity.getCollection();
        if (collection != null) {
            stmt.bindString(7, collection);
        }
 
        String huanxin = entity.getHuanxin();
        if (huanxin != null) {
            stmt.bindString(8, huanxin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectionUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(5, position);
        }
 
        String dept = entity.getDept();
        if (dept != null) {
            stmt.bindString(6, dept);
        }
 
        String collection = entity.getCollection();
        if (collection != null) {
            stmt.bindString(7, collection);
        }
 
        String huanxin = entity.getHuanxin();
        if (huanxin != null) {
            stmt.bindString(8, huanxin);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CollectionUser readEntity(Cursor cursor, int offset) {
        CollectionUser entity = new CollectionUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // position
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dept
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // collection
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // huanxin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollectionUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPosition(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDept(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCollection(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHuanxin(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CollectionUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CollectionUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
