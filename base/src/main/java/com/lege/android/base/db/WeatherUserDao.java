package com.lege.android.base.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "WEATHER_USER".
*/
public class WeatherUserDao extends AbstractDao<WeatherUser, Long> {

    public static final String TABLENAME = "WEATHER_USER";

    /**
     * Properties of entity WeatherUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Weather = new Property(1, int.class, "weather", false, "WEATHER");
        public final static Property Weathercityid = new Property(2, int.class, "weathercityid", false, "WEATHERCITYID");
        public final static Property Cityname = new Property(3, String.class, "cityname", false, "CITYNAME");
        public final static Property Zonename = new Property(4, String.class, "zonename", false, "ZONENAME");
    };


    public WeatherUserDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WEATHER\" INTEGER NOT NULL ," + // 1: weather
                "\"WEATHERCITYID\" INTEGER NOT NULL ," + // 2: weathercityid
                "\"CITYNAME\" TEXT," + // 3: cityname
                "\"ZONENAME\" TEXT);"); // 4: zonename
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeatherUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWeather());
        stmt.bindLong(3, entity.getWeathercityid());
 
        String cityname = entity.getCityname();
        if (cityname != null) {
            stmt.bindString(4, cityname);
        }
 
        String zonename = entity.getZonename();
        if (zonename != null) {
            stmt.bindString(5, zonename);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeatherUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWeather());
        stmt.bindLong(3, entity.getWeathercityid());
 
        String cityname = entity.getCityname();
        if (cityname != null) {
            stmt.bindString(4, cityname);
        }
 
        String zonename = entity.getZonename();
        if (zonename != null) {
            stmt.bindString(5, zonename);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WeatherUser readEntity(Cursor cursor, int offset) {
        WeatherUser entity = new WeatherUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // weather
            cursor.getInt(offset + 2), // weathercityid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cityname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // zonename
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeatherUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWeather(cursor.getInt(offset + 1));
        entity.setWeathercityid(cursor.getInt(offset + 2));
        entity.setCityname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZonename(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WeatherUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WeatherUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
