package com.lege.android.base.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RECENTLY_PLAYED_USER".
*/
public class RecentlyPlayedUserDao extends AbstractDao<RecentlyPlayedUser, Long> {

    public static final String TABLENAME = "RECENTLY_PLAYED_USER";

    /**
     * Properties of entity RecentlyPlayedUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, int.class, "uid", false, "UID");
        public final static Property Group_name = new Property(2, String.class, "group_name", false, "GROUP_NAME");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property From_source = new Property(4, String.class, "from_source", false, "FROM_SOURCE");
        public final static Property Group_id = new Property(5, int.class, "group_id", false, "GROUP_ID");
        public final static Property Sort = new Property(6, int.class, "sort", false, "SORT");
    };


    public RecentlyPlayedUserDao(DaoConfig config) {
        super(config);
    }
    
    public RecentlyPlayedUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECENTLY_PLAYED_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"GROUP_NAME\" TEXT," + // 2: group_name
                "\"IMAGE\" TEXT," + // 3: image
                "\"FROM_SOURCE\" TEXT," + // 4: from_source
                "\"GROUP_ID\" INTEGER NOT NULL ," + // 5: group_id
                "\"SORT\" INTEGER NOT NULL );"); // 6: sort
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECENTLY_PLAYED_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentlyPlayedUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(3, group_name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String from_source = entity.getFrom_source();
        if (from_source != null) {
            stmt.bindString(5, from_source);
        }
        stmt.bindLong(6, entity.getGroup_id());
        stmt.bindLong(7, entity.getSort());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentlyPlayedUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(3, group_name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String from_source = entity.getFrom_source();
        if (from_source != null) {
            stmt.bindString(5, from_source);
        }
        stmt.bindLong(6, entity.getGroup_id());
        stmt.bindLong(7, entity.getSort());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecentlyPlayedUser readEntity(Cursor cursor, int offset) {
        RecentlyPlayedUser entity = new RecentlyPlayedUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // group_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // from_source
            cursor.getInt(offset + 5), // group_id
            cursor.getInt(offset + 6) // sort
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentlyPlayedUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getInt(offset + 1));
        entity.setGroup_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFrom_source(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroup_id(cursor.getInt(offset + 5));
        entity.setSort(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecentlyPlayedUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecentlyPlayedUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
