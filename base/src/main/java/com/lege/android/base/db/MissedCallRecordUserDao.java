package com.lege.android.base.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MISSED_CALL_RECORD_USER".
*/
public class MissedCallRecordUserDao extends AbstractDao<MissedCallRecordUser, Long> {

    public static final String TABLENAME = "MISSED_CALL_RECORD_USER";

    /**
     * Properties of entity MissedCallRecordUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tel = new Property(1, String.class, "tel", false, "TEL");
        public final static Property Employee = new Property(2, String.class, "employee", false, "EMPLOYEE");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property Device_sn = new Property(4, String.class, "device_sn", false, "DEVICE_SN");
        public final static Property Position = new Property(5, String.class, "position", false, "POSITION");
        public final static Property Department = new Property(6, String.class, "department", false, "DEPARTMENT");
        public final static Property Count = new Property(7, int.class, "count", false, "COUNT");
        public final static Property Readed = new Property(8, String.class, "readed", false, "READED");
        public final static Property Insertiontime = new Property(9, String.class, "insertiontime", false, "INSERTIONTIME");
    };


    public MissedCallRecordUserDao(DaoConfig config) {
        super(config);
    }
    
    public MissedCallRecordUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MISSED_CALL_RECORD_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TEL\" TEXT," + // 1: tel
                "\"EMPLOYEE\" TEXT," + // 2: employee
                "\"AVATAR\" TEXT," + // 3: avatar
                "\"DEVICE_SN\" TEXT," + // 4: device_sn
                "\"POSITION\" TEXT," + // 5: position
                "\"DEPARTMENT\" TEXT," + // 6: department
                "\"COUNT\" INTEGER NOT NULL ," + // 7: count
                "\"READED\" TEXT," + // 8: readed
                "\"INSERTIONTIME\" TEXT);"); // 9: insertiontime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MISSED_CALL_RECORD_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MissedCallRecordUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(2, tel);
        }
 
        String employee = entity.getEmployee();
        if (employee != null) {
            stmt.bindString(3, employee);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String device_sn = entity.getDevice_sn();
        if (device_sn != null) {
            stmt.bindString(5, device_sn);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(6, position);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(7, department);
        }
        stmt.bindLong(8, entity.getCount());
 
        String readed = entity.getReaded();
        if (readed != null) {
            stmt.bindString(9, readed);
        }
 
        String insertiontime = entity.getInsertiontime();
        if (insertiontime != null) {
            stmt.bindString(10, insertiontime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MissedCallRecordUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(2, tel);
        }
 
        String employee = entity.getEmployee();
        if (employee != null) {
            stmt.bindString(3, employee);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String device_sn = entity.getDevice_sn();
        if (device_sn != null) {
            stmt.bindString(5, device_sn);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(6, position);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(7, department);
        }
        stmt.bindLong(8, entity.getCount());
 
        String readed = entity.getReaded();
        if (readed != null) {
            stmt.bindString(9, readed);
        }
 
        String insertiontime = entity.getInsertiontime();
        if (insertiontime != null) {
            stmt.bindString(10, insertiontime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MissedCallRecordUser readEntity(Cursor cursor, int offset) {
        MissedCallRecordUser entity = new MissedCallRecordUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tel
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // employee
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // device_sn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // position
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // department
            cursor.getInt(offset + 7), // count
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // readed
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // insertiontime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MissedCallRecordUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmployee(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDevice_sn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPosition(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDepartment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCount(cursor.getInt(offset + 7));
        entity.setReaded(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInsertiontime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MissedCallRecordUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MissedCallRecordUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
