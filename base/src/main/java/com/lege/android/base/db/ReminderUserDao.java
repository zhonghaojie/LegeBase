package com.lege.android.base.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "REMINDER_USER".
*/
public class ReminderUserDao extends AbstractDao<ReminderUser, Long> {

    public static final String TABLENAME = "REMINDER_USER";

    /**
     * Properties of entity ReminderUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Remindertype = new Property(1, int.class, "remindertype", false, "REMINDERTYPE");
        public final static Property Remindersubject = new Property(2, String.class, "remindersubject", false, "REMINDERSUBJECT");
        public final static Property Reminderstarttime = new Property(3, String.class, "reminderstarttime", false, "REMINDERSTARTTIME");
        public final static Property Reminderendtime = new Property(4, String.class, "reminderendtime", false, "REMINDERENDTIME");
        public final static Property Reminderrepeat = new Property(5, String.class, "reminderrepeat", false, "REMINDERREPEAT");
        public final static Property Reminderinterval = new Property(6, String.class, "reminderinterval", false, "REMINDERINTERVAL");
        public final static Property IsStart = new Property(7, int.class, "isStart", false, "IS_START");
        public final static Property Remindid = new Property(8, int.class, "remindid", false, "REMINDID");
    };


    public ReminderUserDao(DaoConfig config) {
        super(config);
    }
    
    public ReminderUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMINDER_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REMINDERTYPE\" INTEGER NOT NULL ," + // 1: remindertype
                "\"REMINDERSUBJECT\" TEXT," + // 2: remindersubject
                "\"REMINDERSTARTTIME\" TEXT," + // 3: reminderstarttime
                "\"REMINDERENDTIME\" TEXT," + // 4: reminderendtime
                "\"REMINDERREPEAT\" TEXT," + // 5: reminderrepeat
                "\"REMINDERINTERVAL\" TEXT," + // 6: reminderinterval
                "\"IS_START\" INTEGER NOT NULL ," + // 7: isStart
                "\"REMINDID\" INTEGER NOT NULL );"); // 8: remindid
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_REMINDER_USER_REMINDID ON REMINDER_USER" +
                " (\"REMINDID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMINDER_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReminderUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemindertype());
 
        String remindersubject = entity.getRemindersubject();
        if (remindersubject != null) {
            stmt.bindString(3, remindersubject);
        }
 
        String reminderstarttime = entity.getReminderstarttime();
        if (reminderstarttime != null) {
            stmt.bindString(4, reminderstarttime);
        }
 
        String reminderendtime = entity.getReminderendtime();
        if (reminderendtime != null) {
            stmt.bindString(5, reminderendtime);
        }
 
        String reminderrepeat = entity.getReminderrepeat();
        if (reminderrepeat != null) {
            stmt.bindString(6, reminderrepeat);
        }
 
        String reminderinterval = entity.getReminderinterval();
        if (reminderinterval != null) {
            stmt.bindString(7, reminderinterval);
        }
        stmt.bindLong(8, entity.getIsStart());
        stmt.bindLong(9, entity.getRemindid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReminderUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemindertype());
 
        String remindersubject = entity.getRemindersubject();
        if (remindersubject != null) {
            stmt.bindString(3, remindersubject);
        }
 
        String reminderstarttime = entity.getReminderstarttime();
        if (reminderstarttime != null) {
            stmt.bindString(4, reminderstarttime);
        }
 
        String reminderendtime = entity.getReminderendtime();
        if (reminderendtime != null) {
            stmt.bindString(5, reminderendtime);
        }
 
        String reminderrepeat = entity.getReminderrepeat();
        if (reminderrepeat != null) {
            stmt.bindString(6, reminderrepeat);
        }
 
        String reminderinterval = entity.getReminderinterval();
        if (reminderinterval != null) {
            stmt.bindString(7, reminderinterval);
        }
        stmt.bindLong(8, entity.getIsStart());
        stmt.bindLong(9, entity.getRemindid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReminderUser readEntity(Cursor cursor, int offset) {
        ReminderUser entity = new ReminderUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // remindertype
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // remindersubject
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // reminderstarttime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // reminderendtime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reminderrepeat
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // reminderinterval
            cursor.getInt(offset + 7), // isStart
            cursor.getInt(offset + 8) // remindid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReminderUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemindertype(cursor.getInt(offset + 1));
        entity.setRemindersubject(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReminderstarttime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReminderendtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReminderrepeat(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReminderinterval(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsStart(cursor.getInt(offset + 7));
        entity.setRemindid(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReminderUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReminderUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
