package com.lege.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lege.android.base.db.NewsUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_USER".
*/
public class NewsUserDao extends AbstractDao<NewsUser, Long> {

    public static final String TABLENAME = "NEWS_USER";

    /**
     * Properties of entity NewsUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Newsid = new Property(1, int.class, "newsid", false, "NEWSID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property Readed = new Property(6, String.class, "readed", false, "READED");
        public final static Property Insertiontime = new Property(7, String.class, "insertiontime", false, "INSERTIONTIME");
    };


    public NewsUserDao(DaoConfig config) {
        super(config);
    }
    
    public NewsUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NEWSID\" INTEGER NOT NULL ," + // 1: newsid
                "\"TITLE\" TEXT," + // 2: title
                "\"DATE\" TEXT," + // 3: date
                "\"URL\" TEXT," + // 4: url
                "\"TIME\" TEXT," + // 5: time
                "\"READED\" TEXT," + // 6: readed
                "\"INSERTIONTIME\" TEXT);"); // 7: insertiontime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_NEWS_USER_NEWSID ON NEWS_USER" +
                " (\"NEWSID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNewsid());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String readed = entity.getReaded();
        if (readed != null) {
            stmt.bindString(7, readed);
        }
 
        String insertiontime = entity.getInsertiontime();
        if (insertiontime != null) {
            stmt.bindString(8, insertiontime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNewsid());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String readed = entity.getReaded();
        if (readed != null) {
            stmt.bindString(7, readed);
        }
 
        String insertiontime = entity.getInsertiontime();
        if (insertiontime != null) {
            stmt.bindString(8, insertiontime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewsUser readEntity(Cursor cursor, int offset) {
        NewsUser entity = new NewsUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // newsid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // readed
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // insertiontime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNewsid(cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReaded(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInsertiontime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewsUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewsUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
