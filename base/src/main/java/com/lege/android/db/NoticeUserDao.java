package com.lege.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lege.android.base.db.NoticeUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTICE_USER".
*/
public class NoticeUserDao extends AbstractDao<NoticeUser, Long> {

    public static final String TABLENAME = "NOTICE_USER";

    /**
     * Properties of entity NoticeUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AbstractX = new Property(1, String.class, "abstractX", false, "ABSTRACT_X");
        public final static Property Company_id = new Property(2, int.class, "company_id", false, "COMPANY_ID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Create_time = new Property(4, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Editor = new Property(5, String.class, "editor", false, "EDITOR");
        public final static Property Editor_id = new Property(6, int.class, "editor_id", false, "EDITOR_ID");
        public final static Property Noticeid = new Property(7, int.class, "noticeid", false, "NOTICEID");
        public final static Property Image = new Property(8, String.class, "image", false, "IMAGE");
        public final static Property Is_published = new Property(9, int.class, "is_published", false, "IS_PUBLISHED");
        public final static Property Is_timing = new Property(10, int.class, "is_timing", false, "IS_TIMING");
        public final static Property Is_top = new Property(11, int.class, "is_top", false, "IS_TOP");
        public final static Property Message_file = new Property(12, String.class, "message_file", false, "MESSAGE_FILE");
        public final static Property Message_type = new Property(13, int.class, "message_type", false, "MESSAGE_TYPE");
        public final static Property Publish_time = new Property(14, String.class, "publish_time", false, "PUBLISH_TIME");
        public final static Property Send_company = new Property(15, String.class, "send_company", false, "SEND_COMPANY");
        public final static Property Send_range = new Property(16, String.class, "send_range", false, "SEND_RANGE");
        public final static Property Send_user = new Property(17, String.class, "send_user", false, "SEND_USER");
        public final static Property Title = new Property(18, String.class, "title", false, "TITLE");
        public final static Property Topic = new Property(19, String.class, "topic", false, "TOPIC");
        public final static Property Url = new Property(20, String.class, "url", false, "URL");
        public final static Property Deleted = new Property(21, String.class, "deleted", false, "DELETED");
        public final static Property Insertiontime = new Property(22, String.class, "insertiontime", false, "INSERTIONTIME");
        public final static Property Readed = new Property(23, String.class, "readed", false, "READED");
    };


    public NoticeUserDao(DaoConfig config) {
        super(config);
    }
    
    public NoticeUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTICE_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ABSTRACT_X\" TEXT," + // 1: abstractX
                "\"COMPANY_ID\" INTEGER NOT NULL ," + // 2: company_id
                "\"CONTENT\" TEXT," + // 3: content
                "\"CREATE_TIME\" TEXT," + // 4: create_time
                "\"EDITOR\" TEXT," + // 5: editor
                "\"EDITOR_ID\" INTEGER NOT NULL ," + // 6: editor_id
                "\"NOTICEID\" INTEGER NOT NULL ," + // 7: noticeid
                "\"IMAGE\" TEXT," + // 8: image
                "\"IS_PUBLISHED\" INTEGER NOT NULL ," + // 9: is_published
                "\"IS_TIMING\" INTEGER NOT NULL ," + // 10: is_timing
                "\"IS_TOP\" INTEGER NOT NULL ," + // 11: is_top
                "\"MESSAGE_FILE\" TEXT," + // 12: message_file
                "\"MESSAGE_TYPE\" INTEGER NOT NULL ," + // 13: message_type
                "\"PUBLISH_TIME\" TEXT," + // 14: publish_time
                "\"SEND_COMPANY\" TEXT," + // 15: send_company
                "\"SEND_RANGE\" TEXT," + // 16: send_range
                "\"SEND_USER\" TEXT," + // 17: send_user
                "\"TITLE\" TEXT," + // 18: title
                "\"TOPIC\" TEXT," + // 19: topic
                "\"URL\" TEXT," + // 20: url
                "\"DELETED\" TEXT," + // 21: deleted
                "\"INSERTIONTIME\" TEXT," + // 22: insertiontime
                "\"READED\" TEXT);"); // 23: readed
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_NOTICE_USER_NOTICEID ON NOTICE_USER" +
                " (\"NOTICEID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTICE_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoticeUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String abstractX = entity.getAbstractX();
        if (abstractX != null) {
            stmt.bindString(2, abstractX);
        }
        stmt.bindLong(3, entity.getCompany_id());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(5, create_time);
        }
 
        String editor = entity.getEditor();
        if (editor != null) {
            stmt.bindString(6, editor);
        }
        stmt.bindLong(7, entity.getEditor_id());
        stmt.bindLong(8, entity.getNoticeid());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
        stmt.bindLong(10, entity.getIs_published());
        stmt.bindLong(11, entity.getIs_timing());
        stmt.bindLong(12, entity.getIs_top());
 
        String message_file = entity.getMessage_file();
        if (message_file != null) {
            stmt.bindString(13, message_file);
        }
        stmt.bindLong(14, entity.getMessage_type());
 
        String publish_time = entity.getPublish_time();
        if (publish_time != null) {
            stmt.bindString(15, publish_time);
        }
 
        String send_company = entity.getSend_company();
        if (send_company != null) {
            stmt.bindString(16, send_company);
        }
 
        String send_range = entity.getSend_range();
        if (send_range != null) {
            stmt.bindString(17, send_range);
        }
 
        String send_user = entity.getSend_user();
        if (send_user != null) {
            stmt.bindString(18, send_user);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(19, title);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(20, topic);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(21, url);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(22, deleted);
        }
 
        String insertiontime = entity.getInsertiontime();
        if (insertiontime != null) {
            stmt.bindString(23, insertiontime);
        }
 
        String readed = entity.getReaded();
        if (readed != null) {
            stmt.bindString(24, readed);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoticeUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String abstractX = entity.getAbstractX();
        if (abstractX != null) {
            stmt.bindString(2, abstractX);
        }
        stmt.bindLong(3, entity.getCompany_id());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(5, create_time);
        }
 
        String editor = entity.getEditor();
        if (editor != null) {
            stmt.bindString(6, editor);
        }
        stmt.bindLong(7, entity.getEditor_id());
        stmt.bindLong(8, entity.getNoticeid());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
        stmt.bindLong(10, entity.getIs_published());
        stmt.bindLong(11, entity.getIs_timing());
        stmt.bindLong(12, entity.getIs_top());
 
        String message_file = entity.getMessage_file();
        if (message_file != null) {
            stmt.bindString(13, message_file);
        }
        stmt.bindLong(14, entity.getMessage_type());
 
        String publish_time = entity.getPublish_time();
        if (publish_time != null) {
            stmt.bindString(15, publish_time);
        }
 
        String send_company = entity.getSend_company();
        if (send_company != null) {
            stmt.bindString(16, send_company);
        }
 
        String send_range = entity.getSend_range();
        if (send_range != null) {
            stmt.bindString(17, send_range);
        }
 
        String send_user = entity.getSend_user();
        if (send_user != null) {
            stmt.bindString(18, send_user);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(19, title);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(20, topic);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(21, url);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(22, deleted);
        }
 
        String insertiontime = entity.getInsertiontime();
        if (insertiontime != null) {
            stmt.bindString(23, insertiontime);
        }
 
        String readed = entity.getReaded();
        if (readed != null) {
            stmt.bindString(24, readed);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NoticeUser readEntity(Cursor cursor, int offset) {
        NoticeUser entity = new NoticeUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // abstractX
            cursor.getInt(offset + 2), // company_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // create_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // editor
            cursor.getInt(offset + 6), // editor_id
            cursor.getInt(offset + 7), // noticeid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // image
            cursor.getInt(offset + 9), // is_published
            cursor.getInt(offset + 10), // is_timing
            cursor.getInt(offset + 11), // is_top
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // message_file
            cursor.getInt(offset + 13), // message_type
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // publish_time
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // send_company
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // send_range
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // send_user
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // title
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // topic
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // url
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // deleted
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // insertiontime
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // readed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoticeUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAbstractX(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompany_id(cursor.getInt(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreate_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEditor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEditor_id(cursor.getInt(offset + 6));
        entity.setNoticeid(cursor.getInt(offset + 7));
        entity.setImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIs_published(cursor.getInt(offset + 9));
        entity.setIs_timing(cursor.getInt(offset + 10));
        entity.setIs_top(cursor.getInt(offset + 11));
        entity.setMessage_file(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMessage_type(cursor.getInt(offset + 13));
        entity.setPublish_time(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSend_company(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSend_range(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSend_user(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTitle(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTopic(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUrl(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDeleted(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setInsertiontime(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setReaded(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NoticeUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NoticeUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
