package com.lege.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lege.android.base.db.MessageUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_USER".
*/
public class MessageUserDao extends AbstractDao<MessageUser, Long> {

    public static final String TABLENAME = "MESSAGE_USER";

    /**
     * Properties of entity MessageUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsReminded = new Property(1, String.class, "isReminded", false, "IS_REMINDED");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Currentdate = new Property(6, String.class, "currentdate", false, "CURRENTDATE");
        public final static Property Currenttime = new Property(7, String.class, "currenttime", false, "CURRENTTIME");
        public final static Property Readed = new Property(8, String.class, "readed", false, "READED");
        public final static Property Newsimagesurl = new Property(9, String.class, "newsimagesurl", false, "NEWSIMAGESURL");
        public final static Property Newsfrom = new Property(10, String.class, "newsfrom", false, "NEWSFROM");
        public final static Property Way = new Property(11, String.class, "way", false, "WAY");
        public final static Property Startloc = new Property(12, String.class, "startloc", false, "STARTLOC");
        public final static Property Endloc = new Property(13, String.class, "endloc", false, "ENDLOC");
        public final static Property Letterid = new Property(14, int.class, "letterid", false, "LETTERID");
        public final static Property Newsid = new Property(15, int.class, "newsid", false, "NEWSID");
        public final static Property Noticeid = new Property(16, int.class, "noticeid", false, "NOTICEID");
        public final static Property Trafficid = new Property(17, int.class, "trafficid", false, "TRAFFICID");
        public final static Property Content = new Property(18, String.class, "content", false, "CONTENT");
    };


    public MessageUserDao(DaoConfig config) {
        super(config);
    }
    
    public MessageUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IS_REMINDED\" TEXT," + // 1: isReminded
                "\"DATE\" TEXT," + // 2: date
                "\"TIME\" TEXT," + // 3: time
                "\"TITLE\" TEXT," + // 4: title
                "\"TYPE\" TEXT," + // 5: type
                "\"CURRENTDATE\" TEXT," + // 6: currentdate
                "\"CURRENTTIME\" TEXT," + // 7: currenttime
                "\"READED\" TEXT," + // 8: readed
                "\"NEWSIMAGESURL\" TEXT," + // 9: newsimagesurl
                "\"NEWSFROM\" TEXT," + // 10: newsfrom
                "\"WAY\" TEXT," + // 11: way
                "\"STARTLOC\" TEXT," + // 12: startloc
                "\"ENDLOC\" TEXT," + // 13: endloc
                "\"LETTERID\" INTEGER NOT NULL ," + // 14: letterid
                "\"NEWSID\" INTEGER NOT NULL ," + // 15: newsid
                "\"NOTICEID\" INTEGER NOT NULL ," + // 16: noticeid
                "\"TRAFFICID\" INTEGER NOT NULL ," + // 17: trafficid
                "\"CONTENT\" TEXT);"); // 18: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String isReminded = entity.getIsReminded();
        if (isReminded != null) {
            stmt.bindString(2, isReminded);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String currentdate = entity.getCurrentdate();
        if (currentdate != null) {
            stmt.bindString(7, currentdate);
        }
 
        String currenttime = entity.getCurrenttime();
        if (currenttime != null) {
            stmt.bindString(8, currenttime);
        }
 
        String readed = entity.getReaded();
        if (readed != null) {
            stmt.bindString(9, readed);
        }
 
        String newsimagesurl = entity.getNewsimagesurl();
        if (newsimagesurl != null) {
            stmt.bindString(10, newsimagesurl);
        }
 
        String newsfrom = entity.getNewsfrom();
        if (newsfrom != null) {
            stmt.bindString(11, newsfrom);
        }
 
        String way = entity.getWay();
        if (way != null) {
            stmt.bindString(12, way);
        }
 
        String startloc = entity.getStartloc();
        if (startloc != null) {
            stmt.bindString(13, startloc);
        }
 
        String endloc = entity.getEndloc();
        if (endloc != null) {
            stmt.bindString(14, endloc);
        }
        stmt.bindLong(15, entity.getLetterid());
        stmt.bindLong(16, entity.getNewsid());
        stmt.bindLong(17, entity.getNoticeid());
        stmt.bindLong(18, entity.getTrafficid());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(19, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String isReminded = entity.getIsReminded();
        if (isReminded != null) {
            stmt.bindString(2, isReminded);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String currentdate = entity.getCurrentdate();
        if (currentdate != null) {
            stmt.bindString(7, currentdate);
        }
 
        String currenttime = entity.getCurrenttime();
        if (currenttime != null) {
            stmt.bindString(8, currenttime);
        }
 
        String readed = entity.getReaded();
        if (readed != null) {
            stmt.bindString(9, readed);
        }
 
        String newsimagesurl = entity.getNewsimagesurl();
        if (newsimagesurl != null) {
            stmt.bindString(10, newsimagesurl);
        }
 
        String newsfrom = entity.getNewsfrom();
        if (newsfrom != null) {
            stmt.bindString(11, newsfrom);
        }
 
        String way = entity.getWay();
        if (way != null) {
            stmt.bindString(12, way);
        }
 
        String startloc = entity.getStartloc();
        if (startloc != null) {
            stmt.bindString(13, startloc);
        }
 
        String endloc = entity.getEndloc();
        if (endloc != null) {
            stmt.bindString(14, endloc);
        }
        stmt.bindLong(15, entity.getLetterid());
        stmt.bindLong(16, entity.getNewsid());
        stmt.bindLong(17, entity.getNoticeid());
        stmt.bindLong(18, entity.getTrafficid());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(19, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageUser readEntity(Cursor cursor, int offset) {
        MessageUser entity = new MessageUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // isReminded
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // currentdate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // currenttime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // readed
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // newsimagesurl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // newsfrom
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // way
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // startloc
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // endloc
            cursor.getInt(offset + 14), // letterid
            cursor.getInt(offset + 15), // newsid
            cursor.getInt(offset + 16), // noticeid
            cursor.getInt(offset + 17), // trafficid
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsReminded(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCurrentdate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCurrenttime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReaded(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNewsimagesurl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNewsfrom(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWay(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStartloc(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEndloc(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLetterid(cursor.getInt(offset + 14));
        entity.setNewsid(cursor.getInt(offset + 15));
        entity.setNoticeid(cursor.getInt(offset + 16));
        entity.setTrafficid(cursor.getInt(offset + 17));
        entity.setContent(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
