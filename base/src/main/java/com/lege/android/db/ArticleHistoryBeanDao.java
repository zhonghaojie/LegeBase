package com.lege.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lege.android.base.db.ArticleHistoryBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE_HISTORY_BEAN".
*/
public class ArticleHistoryBeanDao extends AbstractDao<ArticleHistoryBean, Long> {

    public static final String TABLENAME = "ARTICLE_HISTORY_BEAN";

    /**
     * Properties of entity ArticleHistoryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ArticleID = new Property(1, int.class, "articleID", false, "ARTICLE_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property AddTime = new Property(4, String.class, "addTime", false, "ADD_TIME");
        public final static Property PublishTime = new Property(5, long.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property ImageUrl = new Property(6, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property UpdateTime = new Property(7, String.class, "updateTime", false, "UPDATE_TIME");
    };


    public ArticleHistoryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleHistoryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE_HISTORY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ARTICLE_ID\" INTEGER NOT NULL ," + // 1: articleID
                "\"TITLE\" TEXT," + // 2: title
                "\"URL\" TEXT," + // 3: url
                "\"ADD_TIME\" TEXT," + // 4: addTime
                "\"PUBLISH_TIME\" INTEGER NOT NULL ," + // 5: publishTime
                "\"IMAGE_URL\" TEXT," + // 6: imageUrl
                "\"UPDATE_TIME\" TEXT);"); // 7: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE_HISTORY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticleHistoryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getArticleID());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
        stmt.bindLong(6, entity.getPublishTime());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(8, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticleHistoryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getArticleID());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
        stmt.bindLong(6, entity.getPublishTime());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(8, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ArticleHistoryBean readEntity(Cursor cursor, int offset) {
        ArticleHistoryBean entity = new ArticleHistoryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // articleID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addTime
            cursor.getLong(offset + 5), // publishTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imageUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticleHistoryBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArticleID(cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPublishTime(cursor.getLong(offset + 5));
        entity.setImageUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ArticleHistoryBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ArticleHistoryBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
