package com.lege.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lege.android.base.db.NewRemindUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_REMIND_USER".
*/
public class NewRemindUserDao extends AbstractDao<NewRemindUser, Long> {

    public static final String TABLENAME = "NEW_REMIND_USER";

    /**
     * Properties of entity NewRemindUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Parent_id = new Property(1, int.class, "parent_id", false, "PARENT_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Remind = new Property(3, String.class, "remind", false, "REMIND");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property Icon = new Property(5, String.class, "icon", false, "ICON");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property App = new Property(7, String.class, "app", false, "APP");
        public final static Property Interval = new Property(8, int.class, "interval", false, "INTERVAL");
        public final static Property Starttime = new Property(9, String.class, "starttime", false, "STARTTIME");
        public final static Property Endtime = new Property(10, String.class, "endtime", false, "ENDTIME");
        public final static Property When_play = new Property(11, String.class, "when_play", false, "WHEN_PLAY");
        public final static Property Repeat = new Property(12, String.class, "repeat", false, "REPEAT");
        public final static Property Auto_start = new Property(13, int.class, "auto_start", false, "AUTO_START");
        public final static Property Play_resoure = new Property(14, String.class, "play_resoure", false, "PLAY_RESOURE");
        public final static Property Play_time = new Property(15, int.class, "play_time", false, "PLAY_TIME");
        public final static Property Remind_img = new Property(16, String.class, "remind_img", false, "REMIND_IMG");
        public final static Property Sort = new Property(17, int.class, "sort", false, "SORT");
        public final static Property User_id = new Property(18, int.class, "user_id", false, "USER_ID");
        public final static Property Device_sn = new Property(19, String.class, "device_sn", false, "DEVICE_SN");
        public final static Property Subscribe = new Property(20, int.class, "subscribe", false, "SUBSCRIBE");
        public final static Property Time = new Property(21, String.class, "time", false, "TIME");
    };


    public NewRemindUserDao(DaoConfig config) {
        super(config);
    }
    
    public NewRemindUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_REMIND_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 1: parent_id
                "\"TITLE\" TEXT," + // 2: title
                "\"REMIND\" TEXT," + // 3: remind
                "\"DESC\" TEXT," + // 4: desc
                "\"ICON\" TEXT," + // 5: icon
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"APP\" TEXT," + // 7: app
                "\"INTERVAL\" INTEGER NOT NULL ," + // 8: interval
                "\"STARTTIME\" TEXT," + // 9: starttime
                "\"ENDTIME\" TEXT," + // 10: endtime
                "\"WHEN_PLAY\" TEXT," + // 11: when_play
                "\"REPEAT\" TEXT," + // 12: repeat
                "\"AUTO_START\" INTEGER NOT NULL ," + // 13: auto_start
                "\"PLAY_RESOURE\" TEXT," + // 14: play_resoure
                "\"PLAY_TIME\" INTEGER NOT NULL ," + // 15: play_time
                "\"REMIND_IMG\" TEXT," + // 16: remind_img
                "\"SORT\" INTEGER NOT NULL ," + // 17: sort
                "\"USER_ID\" INTEGER NOT NULL ," + // 18: user_id
                "\"DEVICE_SN\" TEXT," + // 19: device_sn
                "\"SUBSCRIBE\" INTEGER NOT NULL ," + // 20: subscribe
                "\"TIME\" TEXT);"); // 21: time
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_NEW_REMIND_USER_TITLE ON NEW_REMIND_USER" +
                " (\"TITLE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_REMIND_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewRemindUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getParent_id());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String remind = entity.getRemind();
        if (remind != null) {
            stmt.bindString(4, remind);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
        stmt.bindLong(7, entity.getType());
 
        String app = entity.getApp();
        if (app != null) {
            stmt.bindString(8, app);
        }
        stmt.bindLong(9, entity.getInterval());
 
        String starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindString(10, starttime);
        }
 
        String endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindString(11, endtime);
        }
 
        String when_play = entity.getWhen_play();
        if (when_play != null) {
            stmt.bindString(12, when_play);
        }
 
        String repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindString(13, repeat);
        }
        stmt.bindLong(14, entity.getAuto_start());
 
        String play_resoure = entity.getPlay_resoure();
        if (play_resoure != null) {
            stmt.bindString(15, play_resoure);
        }
        stmt.bindLong(16, entity.getPlay_time());
 
        String remind_img = entity.getRemind_img();
        if (remind_img != null) {
            stmt.bindString(17, remind_img);
        }
        stmt.bindLong(18, entity.getSort());
        stmt.bindLong(19, entity.getUser_id());
 
        String device_sn = entity.getDevice_sn();
        if (device_sn != null) {
            stmt.bindString(20, device_sn);
        }
        stmt.bindLong(21, entity.getSubscribe());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(22, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewRemindUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getParent_id());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String remind = entity.getRemind();
        if (remind != null) {
            stmt.bindString(4, remind);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
        stmt.bindLong(7, entity.getType());
 
        String app = entity.getApp();
        if (app != null) {
            stmt.bindString(8, app);
        }
        stmt.bindLong(9, entity.getInterval());
 
        String starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindString(10, starttime);
        }
 
        String endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindString(11, endtime);
        }
 
        String when_play = entity.getWhen_play();
        if (when_play != null) {
            stmt.bindString(12, when_play);
        }
 
        String repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindString(13, repeat);
        }
        stmt.bindLong(14, entity.getAuto_start());
 
        String play_resoure = entity.getPlay_resoure();
        if (play_resoure != null) {
            stmt.bindString(15, play_resoure);
        }
        stmt.bindLong(16, entity.getPlay_time());
 
        String remind_img = entity.getRemind_img();
        if (remind_img != null) {
            stmt.bindString(17, remind_img);
        }
        stmt.bindLong(18, entity.getSort());
        stmt.bindLong(19, entity.getUser_id());
 
        String device_sn = entity.getDevice_sn();
        if (device_sn != null) {
            stmt.bindString(20, device_sn);
        }
        stmt.bindLong(21, entity.getSubscribe());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(22, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewRemindUser readEntity(Cursor cursor, int offset) {
        NewRemindUser entity = new NewRemindUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // parent_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remind
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // icon
            cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // app
            cursor.getInt(offset + 8), // interval
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // starttime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // endtime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // when_play
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // repeat
            cursor.getInt(offset + 13), // auto_start
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // play_resoure
            cursor.getInt(offset + 15), // play_time
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // remind_img
            cursor.getInt(offset + 17), // sort
            cursor.getInt(offset + 18), // user_id
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // device_sn
            cursor.getInt(offset + 20), // subscribe
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewRemindUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParent_id(cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemind(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setApp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInterval(cursor.getInt(offset + 8));
        entity.setStarttime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEndtime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWhen_play(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRepeat(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAuto_start(cursor.getInt(offset + 13));
        entity.setPlay_resoure(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPlay_time(cursor.getInt(offset + 15));
        entity.setRemind_img(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSort(cursor.getInt(offset + 17));
        entity.setUser_id(cursor.getInt(offset + 18));
        entity.setDevice_sn(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSubscribe(cursor.getInt(offset + 20));
        entity.setTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewRemindUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewRemindUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
