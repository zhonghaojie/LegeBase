package com.lege.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lege.android.base.db.TaskBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_BEAN".
*/
public class TaskBeanDao extends AbstractDao<TaskBean, Long> {

    public static final String TABLENAME = "TASK_BEAN";

    /**
     * Properties of entity TaskBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskId = new Property(1, int.class, "taskId", false, "TASK_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Subject = new Property(3, String.class, "subject", false, "SUBJECT");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property Datetime = new Property(5, String.class, "datetime", false, "DATETIME");
        public final static Property State = new Property(6, String.class, "state", false, "STATE");
        public final static Property IsRepeate = new Property(7, boolean.class, "isRepeate", false, "IS_REPEATE");
        public final static Property RepeateType = new Property(8, String.class, "repeateType", false, "REPEATE_TYPE");
        public final static Property IsRead = new Property(9, boolean.class, "isRead", false, "IS_READ");
        public final static Property AlarmRequestCode = new Property(10, String.class, "alarmRequestCode", false, "ALARM_REQUEST_CODE");
        public final static Property AlertTime = new Property(11, String.class, "alertTime", false, "ALERT_TIME");
        public final static Property DelayAlertTime = new Property(12, String.class, "delayAlertTime", false, "DELAY_ALERT_TIME");
        public final static Property Advance = new Property(13, int.class, "advance", false, "ADVANCE");
        public final static Property IsReminded = new Property(14, boolean.class, "isReminded", false, "IS_REMINDED");
        public final static Property RemindInterval = new Property(15, int.class, "remindInterval", false, "REMIND_INTERVAL");
        public final static Property RemindType = new Property(16, int.class, "remindType", false, "REMIND_TYPE");
        public final static Property RemindStartTime = new Property(17, String.class, "remindStartTime", false, "REMIND_START_TIME");
        public final static Property RemindEndTime = new Property(18, String.class, "remindEndTime", false, "REMIND_END_TIME");
        public final static Property AlarmRingType = new Property(19, int.class, "alarmRingType", false, "ALARM_RING_TYPE");
        public final static Property AlarmIsStart = new Property(20, int.class, "alarmIsStart", false, "ALARM_IS_START");
        public final static Property StartTime = new Property(21, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(22, String.class, "endTime", false, "END_TIME");
    };


    public TaskBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TaskBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TASK_ID\" INTEGER NOT NULL ," + // 1: taskId
                "\"TYPE\" TEXT," + // 2: type
                "\"SUBJECT\" TEXT," + // 3: subject
                "\"DATE\" TEXT," + // 4: date
                "\"DATETIME\" TEXT," + // 5: datetime
                "\"STATE\" TEXT," + // 6: state
                "\"IS_REPEATE\" INTEGER NOT NULL ," + // 7: isRepeate
                "\"REPEATE_TYPE\" TEXT," + // 8: repeateType
                "\"IS_READ\" INTEGER NOT NULL ," + // 9: isRead
                "\"ALARM_REQUEST_CODE\" TEXT," + // 10: alarmRequestCode
                "\"ALERT_TIME\" TEXT," + // 11: alertTime
                "\"DELAY_ALERT_TIME\" TEXT," + // 12: delayAlertTime
                "\"ADVANCE\" INTEGER NOT NULL ," + // 13: advance
                "\"IS_REMINDED\" INTEGER NOT NULL ," + // 14: isReminded
                "\"REMIND_INTERVAL\" INTEGER NOT NULL ," + // 15: remindInterval
                "\"REMIND_TYPE\" INTEGER NOT NULL ," + // 16: remindType
                "\"REMIND_START_TIME\" TEXT," + // 17: remindStartTime
                "\"REMIND_END_TIME\" TEXT," + // 18: remindEndTime
                "\"ALARM_RING_TYPE\" INTEGER NOT NULL ," + // 19: alarmRingType
                "\"ALARM_IS_START\" INTEGER NOT NULL ," + // 20: alarmIsStart
                "\"START_TIME\" TEXT," + // 21: startTime
                "\"END_TIME\" TEXT);"); // 22: endTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TASK_BEAN_TASK_ID ON TASK_BEAN" +
                " (\"TASK_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTaskId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(4, subject);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindString(6, datetime);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(7, state);
        }
        stmt.bindLong(8, entity.getIsRepeate() ? 1L: 0L);
 
        String repeateType = entity.getRepeateType();
        if (repeateType != null) {
            stmt.bindString(9, repeateType);
        }
        stmt.bindLong(10, entity.getIsRead() ? 1L: 0L);
 
        String alarmRequestCode = entity.getAlarmRequestCode();
        if (alarmRequestCode != null) {
            stmt.bindString(11, alarmRequestCode);
        }
 
        String alertTime = entity.getAlertTime();
        if (alertTime != null) {
            stmt.bindString(12, alertTime);
        }
 
        String delayAlertTime = entity.getDelayAlertTime();
        if (delayAlertTime != null) {
            stmt.bindString(13, delayAlertTime);
        }
        stmt.bindLong(14, entity.getAdvance());
        stmt.bindLong(15, entity.getIsReminded() ? 1L: 0L);
        stmt.bindLong(16, entity.getRemindInterval());
        stmt.bindLong(17, entity.getRemindType());
 
        String remindStartTime = entity.getRemindStartTime();
        if (remindStartTime != null) {
            stmt.bindString(18, remindStartTime);
        }
 
        String remindEndTime = entity.getRemindEndTime();
        if (remindEndTime != null) {
            stmt.bindString(19, remindEndTime);
        }
        stmt.bindLong(20, entity.getAlarmRingType());
        stmt.bindLong(21, entity.getAlarmIsStart());
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(22, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(23, endTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTaskId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(4, subject);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindString(6, datetime);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(7, state);
        }
        stmt.bindLong(8, entity.getIsRepeate() ? 1L: 0L);
 
        String repeateType = entity.getRepeateType();
        if (repeateType != null) {
            stmt.bindString(9, repeateType);
        }
        stmt.bindLong(10, entity.getIsRead() ? 1L: 0L);
 
        String alarmRequestCode = entity.getAlarmRequestCode();
        if (alarmRequestCode != null) {
            stmt.bindString(11, alarmRequestCode);
        }
 
        String alertTime = entity.getAlertTime();
        if (alertTime != null) {
            stmt.bindString(12, alertTime);
        }
 
        String delayAlertTime = entity.getDelayAlertTime();
        if (delayAlertTime != null) {
            stmt.bindString(13, delayAlertTime);
        }
        stmt.bindLong(14, entity.getAdvance());
        stmt.bindLong(15, entity.getIsReminded() ? 1L: 0L);
        stmt.bindLong(16, entity.getRemindInterval());
        stmt.bindLong(17, entity.getRemindType());
 
        String remindStartTime = entity.getRemindStartTime();
        if (remindStartTime != null) {
            stmt.bindString(18, remindStartTime);
        }
 
        String remindEndTime = entity.getRemindEndTime();
        if (remindEndTime != null) {
            stmt.bindString(19, remindEndTime);
        }
        stmt.bindLong(20, entity.getAlarmRingType());
        stmt.bindLong(21, entity.getAlarmIsStart());
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(22, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(23, endTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskBean readEntity(Cursor cursor, int offset) {
        TaskBean entity = new TaskBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // taskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // subject
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // datetime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // state
            cursor.getShort(offset + 7) != 0, // isRepeate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // repeateType
            cursor.getShort(offset + 9) != 0, // isRead
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // alarmRequestCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // alertTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // delayAlertTime
            cursor.getInt(offset + 13), // advance
            cursor.getShort(offset + 14) != 0, // isReminded
            cursor.getInt(offset + 15), // remindInterval
            cursor.getInt(offset + 16), // remindType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // remindStartTime
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // remindEndTime
            cursor.getInt(offset + 19), // alarmRingType
            cursor.getInt(offset + 20), // alarmIsStart
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // startTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // endTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskId(cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubject(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDatetime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setState(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsRepeate(cursor.getShort(offset + 7) != 0);
        entity.setRepeateType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsRead(cursor.getShort(offset + 9) != 0);
        entity.setAlarmRequestCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAlertTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDelayAlertTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAdvance(cursor.getInt(offset + 13));
        entity.setIsReminded(cursor.getShort(offset + 14) != 0);
        entity.setRemindInterval(cursor.getInt(offset + 15));
        entity.setRemindType(cursor.getInt(offset + 16));
        entity.setRemindStartTime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRemindEndTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAlarmRingType(cursor.getInt(offset + 19));
        entity.setAlarmIsStart(cursor.getInt(offset + 20));
        entity.setStartTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setEndTime(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
